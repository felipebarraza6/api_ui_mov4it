# Generated by Django 5.0.6 on 2024-06-28 13:47

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('move4it', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='PreviousIllnesse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('name', models.CharField(max_length=1200, verbose_name='nombre')),
            ],
            options={
                'ordering': ['-created', '-modified'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SportActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('name', models.CharField(max_length=1200, verbose_name='nombre')),
            ],
            options={
                'ordering': ['-created', '-modified'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('email', models.EmailField(error_messages={'unique': 'El usuario ya existe.'}, max_length=254, unique=True, verbose_name='email address')),
                ('identification_number', models.CharField(max_length=80, verbose_name='Número de identificación(rut o pasaporte)')),
                ('gender', models.CharField(blank=True, max_length=10, null=True, verbose_name='Género')),
                ('phone_number', models.CharField(blank=True, max_length=500, null=True, verbose_name='Telefono')),
                ('type_user', models.CharField(choices=[('ADM', 'administrator'), ('ADC', 'admin_client'), ('CF', 'client')], max_length=3, verbose_name='Tipo de usuario')),
                ('is_verified', models.BooleanField(default=False, help_text='Se establece en verdadero cuando el usuario ha verificado su dirección de correo electrónico', verbose_name='vertificado')),
                ('is_leader', models.BooleanField(default=True, help_text='Se establece en verdadero cuando el usuario es lider de su grupo', verbose_name='es lider')),
                ('username', models.CharField(blank=True, help_text='Deje este campo en blanco para generar automáticamente un nombre de usuario.', max_length=150, null=True, unique=True)),
                ('group_participation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='move4it.group', verbose_name='Equipo de participación')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['-created', '-modified'],
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('points', models.IntegerField(blank=True, null=True, verbose_name='Puntos')),
                ('wellnes_goal', models.TextField(blank=True, null=True, verbose_name='Objetivo de bienestar')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Fecha de nacimiento')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Biografía')),
                ('target_weight', models.FloatField(blank=True, null=True, verbose_name='Peso objetivo')),
                ('target_fat', models.FloatField(blank=True, null=True, verbose_name='Grasa objetivo')),
                ('sports_frequancy', models.IntegerField(blank=True, null=True, verbose_name='Frecuencia de deporte')),
                ('sports_consulting', models.TextField(blank=True, max_length=1200, null=True, verbose_name='Consulta deportiva')),
                ('nutritional_advice', models.TextField(blank=True, max_length=1200, null=True, verbose_name='Consejo nutricional')),
                ('previous_illnesses', models.ManyToManyField(blank=True, to='users.previousillnesse', verbose_name='Enfermedades previas')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('sports_activities', models.ManyToManyField(blank=True, to='users.sportactivity', verbose_name='Actividades')),
            ],
            options={
                'ordering': ['-created', '-modified'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CorporalMeditions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creacion.', verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='Fecha de modificacion.', verbose_name='modified at')),
                ('height', models.FloatField(blank=True, null=True, verbose_name='Altura')),
                ('weight', models.FloatField(blank=True, null=True, verbose_name='Peso')),
                ('fat', models.FloatField(blank=True, null=True, verbose_name='Grasa')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.profile')),
            ],
            options={
                'verbose_name': 'Medicion',
                'verbose_name_plural': 'Mediciones',
            },
        ),
    ]
